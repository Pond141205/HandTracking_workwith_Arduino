import cv2
import mediapipe as mp
import math

class HandDetector:
    def __init__(self, mode=False, hands_to_track=2,
                 detection_confidence=0.5, tracking_confidence=0.5) -> None:
        self.mode = mode
        self.hand_to_track = hands_to_track
        self.detection_confidence = detection_confidence
        self.tracking_confidence = tracking_confidence

        self.mp_hand = mp.solutions.hands
        self.hands = self.mp_hand.Hands(
            static_image_mode=self.mode,
            max_num_hands=self.hand_to_track,
            min_detection_confidence=self.detection_confidence,
            min_tracking_confidence=self.tracking_confidence
        )

        self.mp_drawing_utils = mp.solutions.drawing_utils
        self.tips_ids = [4, 8, 12, 16, 20]

        self.finger_angles = {}  # Dictionary to store finger angles

    def find_hands(self, img, draw=True):
        self.result = self.hands.process(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

        if self.result.multi_hand_landmarks:
            if draw:
                for hand_landmarks in self.result.multi_hand_landmarks:
                    self.mp_drawing_utils.draw_landmarks(
                        img,
                        hand_landmarks,
                        self.mp_hand.HAND_CONNECTIONS,
                    )
        return img

    def find_position(self, img, hand_index=0, draw=True):
        self.land_mark_list = []

        if self.result.multi_hand_landmarks:
            interest_hand = self.result.multi_hand_landmarks[hand_index]

            for id, landmark in enumerate(interest_hand.landmark):
                h, w, c = img.shape
                cx, cy = int(landmark.x * w), int(landmark.y * h)
                self.land_mark_list.append([id, cx, cy])

        return self.land_mark_list

    def update_finger_angles(self):
        if len(self.land_mark_list) != 0:
            self.finger_angles = {}

            for tip_id in range(1, 5):
                finger_name = "Thumb" if tip_id == 1 else \
                              "Index" if tip_id == 2 else \
                              "Middle" if tip_id == 3 else \
                              "Ring" if tip_id == 4 else "Pinky"

                # Calculate the angle of the finger joint using three landmarks
                joint1 = self.land_mark_list[self.tips_ids[tip_id] - 2]
                joint2 = self.land_mark_list[self.tips_ids[tip_id] - 1]
                joint3 = self.land_mark_list[self.tips_ids[tip_id]]

                # Calculate the angle using the arctan2 function
                angle = math.degrees(math.atan2(joint3[1] - joint2[1], joint3[0] - joint2[0]) -
                                     math.atan2(joint2[1] - joint1[1], joint2[0] - joint1[0]))

                # Ensure the angle is between 0 and 180 degrees
                if angle < 0:
                    angle += 180

                self.finger_angles[finger_name] = angle

    def get_finger_angle(self, finger_name):
        return self.finger_angles.get(finger_name, 0.0)
